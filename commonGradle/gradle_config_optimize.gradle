//  腾讯镜像
def tencent_mirror_url = 'https://mirrors.cloud.tencent.com/gradle/'

// gradle 阿里云镜像
def aliyun_mirror_url = 'https://mirrors.aliyun.com/macports/distfiles/gradle/'

def gradle_mirror_url = aliyun_mirror_url

// 替换gradle wrapper的下载地址
gradle.rootProject {
    def wrapperPropertiesFile = file("gradle/wrapper/gradle-wrapper.properties")

    //读取现有属性文件
    def properties = new Properties()
    properties.load(new FileInputStream(wrapperPropertiesFile))

    def distributionUrl = properties.getProperty('distributionUrl')
    println "项目 Gradle Wrapper 当前的 distributionUrl: $distributionUrl"

    if (distributionUrl.startsWith(gradle_mirror_url)) {
        println '项目 Gradle Wrapper 的 distributionUrl 无需进行替换，当前地址为优化镜像地址'
        return
    }

    // 替换项目中原有的  distributionUrl 地址
    def newDistributionUrl = distributionUrl.replace('https://services.gradle.org/distributions/', gradle_mirror_url)
    println "项目 Gradle Wrapper 替换后的 distributionUrl: $newDistributionUrl"

    // 更新 distributionUrl 属性
    properties.setProperty('distributionUrl', newDistributionUrl)

    // 将更新的属性写回文件
    properties.store(new FileWriter(wrapperPropertiesFile), null)
}


// 修改项目依赖的仓库地址
gradle.settingsEvaluated { settings ->
    settings.pluginManagement {
        repositories {
            maven { url 'https://maven.aliyun.com/repository/public' }
            maven { url 'https://maven.aliyun.com/repository/google' }
            maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
            maven { url 'https://jitpack.io' }
            google()  // 阿里云对于有些库会有丢失，加入进行兜底
            mavenCentral()
            gradlePluginPortal()
        }
    }
    settings.dependencyResolutionManagement {
        /**
         * FAIL_ON_PROJECT_REPOS:  如果设置此模式，则在项目中直接或通过插件直接声明的任何存储库都将触发构建错误
         * PREFER_PROJECT:         如果设置此模式，则在项目上声明的任何存储库会覆盖设置中声明的存储库
         * PREFER_SETTINGS：       如果设置此模式，则项目中使用的存储库只会以设置中声明的为准
         */
        repositoriesMode.set(RepositoriesMode.PREFER_PROJECT)

        repositories {
            mavenLocal()
            maven { url 'https://maven.aliyun.com/repository/public' } // central 和 jcenter 的聚合仓
            maven { url 'https://maven.aliyun.com/repository/google' }
            maven { url 'https://jitpack.io' }
            google()  // 阿里云对于有些库会有丢失，加入进行兜底
            mavenCentral()
        }
    }
}