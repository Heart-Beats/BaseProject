apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.kanyun.kace'

//apply plugin: 'com.kezong.fat-aar'

android {
    namespace 'com.hl.uikit'

    compileSdkVersion 31
    resourcePrefix "uikit_"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        ndk {
            /**
             * armeabi-v7a 和 arm64-v8a 架构的设备会向下兼容：
             * 1. 只适配 armeabi 的 APP 可以跑在 armeabi,x86,x86_64,armeabi-v7a,arm64-v8 设备上
             * 2. 只适配 armeabi-v7a 可以运行在 armeabi-v7a 和 arm64-v8a 设备上
             * 3. 只适配 arm64-v8a 的 App 只可以运行在 arm64-v8a 设备上
             *
             */
            //设置支持的SO库架构
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

//fataar {
//    /**
//     * 如果 transitive 为真，本地 jar 模块和远程库的依赖项将被嵌入。
//     * 如果传递性为假，则只需嵌入第一级依赖项
//     * 本地 aar 项目不支持传递，总是嵌入第一层
//     * 默认值为假
//     * @since 1.3.0
//     */
//    transitive = true //如果你想将所有远程依赖在pom中声明的依赖项同时打入在最终产物里的话, transitive 需要为 true
//}

kace {
    // 当 whiteList 不为空时，只有 whiteList 中的 layout 才会被解析
    whiteList = []

    // 当 blackList 不为空时，blackList 中的 layout 不会被解析
    blackList = [
            "uikit_options_picker_dialog_fragment.xml",
            "uikit_range_time_picker_dialog_fragment.xml",
            "uikit_timeinterval_dialog_fragment.xml",
    ]
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // embed 可使打包的产物中包含 java  依赖， aar 依赖或者 远程依赖
    api project(path: ':uikit-res')
    api project(path: ':uikit-toast')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.6.0"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.fragment:fragment-ktx:1.4.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"
    implementation "com.google.android.material:material:1.5.0"

    //github 地址 ：https://github.com/zyyoona7/WheelPicker
//    def wheel_picker_version = '2.0.7'
//    api "com.github.zyyoona7.WheelPicker:wheelview:${wheel_picker_version}"
//    api "com.github.zyyoona7.WheelPicker:pickerview:${wheel_picker_version}"

    def wheel_picker_version = '1.0.9'
    api "com.github.zyyoona7:wheelview:${wheel_picker_version}"
    api "com.github.zyyoona7:pickerview:${wheel_picker_version}"

    //github 地址 ：https://github.com/airbnb/lottie-android
    api('com.airbnb.android:lottie:5.0.3')
    api 'io.github.scwang90:refresh-layout-kernel:2.0.5'
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    def picture_selector_version = 'v3.0.6'
    api "io.github.lucksiege:pictureselector:$picture_selector_version"
    api "io.github.lucksiege:compress:$picture_selector_version"

    implementation 'com.guolindev.permissionx:permissionx:1.7.1'

    //完整版引入
    api('com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer:v8.1.9-release-jitpack')

    api('com.github.getActivity:ShapeView:8.5')
}
