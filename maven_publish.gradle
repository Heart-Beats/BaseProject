import com.buildsrc.Versions

/**
 *  编译本地相关项目
 */
task buildSdk() {
    dependsOn gradle.includedBuild('uikit').task(':uikit:assemble')
    dependsOn gradle.includedBuild('uikit').task(':uikit-res:assemble')

    dependsOn gradle.includedBuild('project').task(':base-api:assemble')
    dependsOn gradle.includedBuild('project').task(':base-app-res:assemble')
    dependsOn gradle.includedBuild('project').task(':base-arch:assemble')
    dependsOn gradle.includedBuild('project').task(':utils:assemble')
    dependsOn gradle.includedBuild('project').task(':SDK:Pay:assemble')
    dependsOn gradle.includedBuild('project').task(':SDK:Umeng:assemble')
}

//引入配置设置
apply from: 'publish_config.gradle'
apply plugin: 'maven-publish'

/**
 *
 * 生成 Maven 依赖节点
 */
static def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('scope', scope)
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    return node
}

/**
 *
 * 设置 pom 文件的 dependencies节点
 *      别的项目依赖该 pom  文件时，会从 dependencies节点下根据 scope 来选择是否下载依赖库
 *
 *  scope 有如下取值：
 *      compile：    默认值，compile 表示被依赖的 Jar 包，参与当前项目的编译，并且后续的测试和运行阶段也参与其中
 *      test：       表示依赖项目仅参与测试阶段相关的工作，包括测试代码的编译，执行
 *      runntime：   表示依赖项目并不参与项目的编译阶段工作，但是后续的测试和运行阶段的工作要其参与其中。这个作用域日常工作中使用的比较少
 *      provided：   与 compile 类似，唯一的区别就是在打包的时候会跳过作用域是 provided 的项目，一般用于系统内置相关 sdk
 *      system：     与 provide 的作用范围类似，唯一的区别就是不会从 Maven 仓库抓取 Jar 包，而是从本地文件系统获取
 */
def setDependencyNode(root, scope, groupId, artifactId, version) {
    println "添加依赖项：  $scope ---> $groupId:$artifactId:$version"
    Node dependencies
    NodeList dependenciesList = root.get('dependencies')
    if (dependenciesList.size() == 0) {
        dependencies = root.appendNode('dependencies')
    } else {
        dependencies = (Node) dependenciesList[0]
    }

    dependencies.append(getDependencyNode(scope, groupId, artifactId, version))
}

/**
 *
 * 获取 git 提交编码
 */
static def gitShortRev() {
    def gitCommit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> gitCommit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return gitCommit
}

/**
 * pom 文件添加 scm 节点下的  connection 和  url 信息
 *
 */
def setScm(root) {
    def scm = root.appendNode('scm')
    scm.appendNode('connection', "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT_NAME}.git")

    def commit

    // 判断有没有CI 这个环境变量, 没有使用 git  的提交记录
    if ("${System.env.CI}".equalsIgnoreCase("true")) {
        commit = System.getenv("GITHUB_SHA")
    } else {
        commit = gitShortRev()
    }
    scm.appendNode('url', "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT_NAME}/commit/$commit")
}

/**
 * 设置发布依赖的 pom 文件名以及编译项目|
 *
 *  pom.xml 配置文件具体使用说明见： https://www.jianshu.com/p/0e3a1f9c9ce7
 *
 */
def setGeneratePomFileAndDepends(publicationName) {
    model {
        // generatePomFileForPubNamePublication: 为名为PubName的发布创建一个POM文件，填充已知元数据，如项目名称、项目版本和依赖项。
        //                                          生成的POM文件默认放在 *build/publications/$pubName/pom-default.xml*.
        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
            destination = file("$buildDir/pom/$publicationName-pom.xml")
            dependsOn(buildSdk)
        }
    }
}

def sourceJar(String name, String path) {
    return tasks.create("source${name.capitalize()}Jar", Jar) {
        group = "publishing"
        description = "package ${name} source to jar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDirectory = file("$path/build/libs/")
        getArchiveClassifier().set('sources')
    }
}

def sourceAar(String name, String path) {
    return tasks.create("source${name.capitalize()}Aar", Jar) {
        group = "publishing"
        description = "package ${name} source to aar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDirectory = file("$path/build/libs/")
        getArchiveClassifier().set('sources')
    }
}

def printPublicationVersion() {
    println "publicationVersion:${getPublicationVersion()}"
}


setGeneratePomFileAndDepends('uikit')
setGeneratePomFileAndDepends('uikitRes')
setGeneratePomFileAndDepends('baseApi')
setGeneratePomFileAndDepends('baseAppRes')
setGeneratePomFileAndDepends('baseArch')
setGeneratePomFileAndDepends('utils')
setGeneratePomFileAndDepends('Pay')
setGeneratePomFileAndDepends('Umeng')


/**
 *  详情使用可见：  https://juejin.cn/post/6844904185754812423
 */
project.afterEvaluate {
    publishing {

        publications {

            //定义发布器的名称
            uikit(MavenPublication) {
                def moduleName = 'uikit'
                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId moduleName

                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar") //指定 jar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, 'compile', myGroupId, 'uikit-res', getPublicationVersion())

                    // 添加相关依赖库，缺失会导致运行时无法找到对应类
                    setDependencyNode(root, 'compile', 'org.jetbrains.kotlin', 'kotlin-stdlib', Versions.KOTLIN)
                    setDependencyNode(root, 'compile', 'androidx.appcompat', 'appcompat', Versions.APPCOMPAT)
                    setDependencyNode(root, 'compile', 'androidx.core', 'core-ktx', Versions.CORE_KTX)
                    setDependencyNode(root, 'compile', 'androidx.recyclerview', 'recyclerview', Versions.RECYCLERVIEW)
                    setDependencyNode(root, 'compile', 'androidx.fragment', 'fragment-ktx', Versions.FRAGMENT)
                    setDependencyNode(root, 'compile', 'androidx.constraintlayout', 'constraintlayout', Versions.CONSTRAINT_LAYOUT)
                    setDependencyNode(root, 'compile', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-core', Versions.KOTLIN_COROUTINES)
                    setDependencyNode(root, 'compile', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-android', Versions.KOTLIN_COROUTINES)
                    setDependencyNode(root, 'compile', 'com.google.android.material', 'material', Versions.MATERIAL)

                    setDependencyNode(root, 'compile', 'com.github.zyyoona7', 'wheelview', '1.0.7')
                    setDependencyNode(root, 'compile', 'com.github.zyyoona7', 'pickerview', '1.0.9')
                    setDependencyNode(root, 'compile', 'com.airbnb.android', 'lottie', Versions.LOTTIE)
                    setDependencyNode(root, 'compile', 'io.github.scwang90', 'refresh-layout-kernel', Versions.SMART_REFRESH_LAYOUT)
                    setDependencyNode(root, 'compile', 'io.github.lucksiege', 'pictureselector', Versions.PICTURE_SELECTOR)
                    setDependencyNode(root, 'compile', 'io.github.lucksiege', 'compress', Versions.PICTURE_SELECTOR)
                    setDependencyNode(root, 'compile', 'com.github.bumptech.glide', 'glide', Versions.GLIDE)
                    setDependencyNode(root, 'compile', 'com.guolindev.permissionx', 'permissionx', Versions.PERMISSION_X)
                    setDependencyNode(root, 'compile', 'com.github.CarGuo.GSYVideoPlayer', 'GSYVideoPlayer', Versions.GSY_VIDEO_PLAYER)
                    setScm(root)
                }
            }

            uikitRes(MavenPublication) {
                def moduleName = 'uikit-res'
                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            baseApi(MavenPublication) {
                def moduleName = 'base-api'
                def modulePath = "$libProjectPath/base/api"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, 'compile', 'org.jetbrains.kotlin', 'kotlin-stdlib', Versions.KOTLIN)
                    setDependencyNode(root, 'compile', 'com.squareup.retrofit2', 'retrofit', Versions.RETROFIT)
                    setDependencyNode(root, 'compile', 'com.squareup.retrofit2', 'converter-gson', Versions.RETROFIT)
                    setDependencyNode(root, 'compile', 'com.squareup.retrofit2', 'adapter-rxjava3', Versions.RETROFIT)
                    setDependencyNode(root, 'compile', 'com.squareup.okhttp3', 'logging-interceptor', Versions.OKHTTP)
                    setScm(root)
                }
            }


            baseAppRes(MavenPublication) {
                def moduleName = 'base-app-res'
                def modulePath = "$libProjectPath/base/app-res"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            baseArch(MavenPublication) {
                def moduleName = 'base-arch'
                def modulePath = "$libProjectPath/base/arch"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, 'compile', myGroupId, 'base-app-res', getPublicationVersion())

                    setDependencyNode(root, 'compile', 'androidx.core', 'core-ktx', Versions.CORE_KTX)
                    setDependencyNode(root, 'compile', 'androidx.appcompat', 'appcompat', Versions.APPCOMPAT)
                    setDependencyNode(root, 'compile', 'androidx.activity', 'activity', Versions.ACTIVITY)
                    setDependencyNode(root, 'compile', 'androidx.fragment', 'fragment', Versions.FRAGMENT)
                    setDependencyNode(root, 'compile', 'androidx.activity', 'activity-ktx', Versions.ACTIVITY)
                    setDependencyNode(root, 'compile', 'androidx.fragment', 'fragment-ktx', Versions.FRAGMENT)
                    setDependencyNode(root, 'compile', 'androidx.databinding', 'viewbinding', Versions.DATA_BINDING)
                    setDependencyNode(root, 'compile', 'androidx.databinding', 'databinding-runtime', Versions.DATA_BINDING)
                    setDependencyNode(root, 'compile', 'com.google.android.material', 'material', Versions.MATERIAL)
                    setDependencyNode(root, 'compile', 'androidx.recyclerview', 'recyclerview', Versions.RECYCLERVIEW)
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-viewmodel-ktx', Versions.LIFECYCLE)
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-livedata-ktx', Versions.LIFECYCLE)
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-extensions', '2.2.0')
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-runtime-ktx', Versions.LIFECYCLE)
                    setDependencyNode(root, 'compile', 'androidx.navigation', 'navigation-fragment-ktx', Versions.NAV_VERSION)
                    setDependencyNode(root, 'compile', 'androidx.navigation', 'navigation-ui', Versions.NAV_VERSION)

                    setDependencyNode(root, 'compile', 'com.geyifeng.immersionbar', 'immersionbar', Versions.IMMERSION_BAR)
                    setDependencyNode(root, 'compile', 'com.geyifeng.immersionbar', 'immersionbar-ktx', Versions.IMMERSION_BAR)
                    setDependencyNode(root, 'compile', 'com.github.bumptech.glide', 'glide', Versions.GLIDE)
                    setDependencyNode(root, 'compile', 'com.google.code.gson', 'gson', Versions.GSON)
                    setDependencyNode(root, 'compile', 'com.github.li-xiaojun', 'XPopup', Versions.X_POPUP)
                    setDependencyNode(root, 'compile', 'com.blankj', 'utilcodex', Versions.UTIL_CODE_X)
                    setScm(root)
                }
            }

            utils(MavenPublication) {
                def moduleName = 'utils'
                def modulePath = "$libProjectPath/$moduleName"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, 'compile', myGroupId, 'uikit', getPublicationVersion())

                    setDependencyNode(root, 'compile', 'androidx.core', 'core-ktx', Versions.CORE_KTX)
                    setDependencyNode(root, 'compile', 'androidx.appcompat', 'appcompat', Versions.APPCOMPAT)
                    setDependencyNode(root, 'compile', 'androidx.activity', 'activity', Versions.ACTIVITY)
                    setDependencyNode(root, 'compile', 'androidx.fragment', 'fragment', Versions.FRAGMENT)
                    setDependencyNode(root, 'compile', 'androidx.activity', 'activity-ktx', Versions.ACTIVITY)
                    setDependencyNode(root, 'compile', 'androidx.fragment', 'fragment-ktx', Versions.FRAGMENT)
                    setDependencyNode(root, 'compile', 'com.google.android.material', 'material', Versions.MATERIAL)
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-viewmodel-ktx', Versions.LIFECYCLE)
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-livedata-ktx', Versions.LIFECYCLE)
                    setDependencyNode(root, 'compile', 'androidx.lifecycle', 'lifecycle-runtime-ktx', Versions.LIFECYCLE)
                    setDependencyNode(root, 'compile', 'androidx.navigation', 'navigation-fragment-ktx', Versions.NAV_VERSION)

                    setDependencyNode(root, 'compile', 'com.guolindev.permissionx', 'permissionx', Versions.PERMISSION_X)
                    setDependencyNode(root, 'compile', 'com.google.code.gson', 'gson', Versions.GSON)
                    setDependencyNode(root, 'compile', 'io.github.shashank02051997', 'FancyToast', Versions.FANCY_TOAST)
                    setDependencyNode(root, 'compile', 'androidx.security', 'security-crypto', Versions.SECURITY_CRYPTO)
                    setDependencyNode(root, 'compile', 'com.github.bumptech.glide', 'glide', Versions.GLIDE)
                    setDependencyNode(root, 'compile', 'com.github.jenly1314', 'zxing-lite', Versions.ZXING_LITE)
                    setDependencyNode(root, 'compile', 'io.github.youth5201314', 'banner', Versions.BANNER)
                    setDependencyNode(root, 'compile', 'io.github.lucksiege', 'pictureselector', Versions.PICTURE_SELECTOR)
                    setDependencyNode(root, 'compile', 'io.github.lucksiege', 'compress', Versions.PICTURE_SELECTOR)
                    setDependencyNode(root, 'compile', 'com.teprinciple', 'updateapputilsx', Versions.UPDATE_APP_UTILSX)
                    setDependencyNode(root, 'compile', 'com.blankj', 'utilcodex', Versions.UTIL_CODE_X)
                    setDependencyNode(root, 'compile', 'com.github.CarGuo.GSYVideoPlayer', 'GSYVideoPlayer', Versions.GSY_VIDEO_PLAYER)

                    setDependencyNode(root, 'compile', myGroupId, 'base-app-res', getPublicationVersion())
                    setDependencyNode(root, 'compile', 'com.elvishew', 'xlog', Versions.XLOG)
                    setDependencyNode(root, 'compile', 'com.tencent.tbs', 'tbssdk', Versions.TBS_SDK)
                    setDependencyNode(root, 'compile', 'com.github.getActivity', 'EasyHttp', Versions.EASY_HTTP)
                    setDependencyNode(root, 'compile', 'com.github.li-xiaojun', 'XPopup', Versions.X_POPUP)
                    setDependencyNode(root, 'compile', 'com.squareup.okhttp3', 'okhttp', Versions.OKHTTP)
                    setDependencyNode(root, 'compile', 'com.geyifeng.immersionbar', 'immersionbar', Versions.IMMERSION_BAR)
                    setDependencyNode(root, 'compile', 'com.geyifeng.immersionbar', 'immersionbar-ktx', Versions.IMMERSION_BAR)

                    setDependencyNode(root, 'compile', 'me.rosuh', 'AndroidFilePicker', Versions.ANDROID_FILE_PICKER)
                    setDependencyNode(root, 'compile', 'cjt.library.wheel', 'camera', Versions.CAMERA)

                    setScm(root)
                }
            }

            Pay(MavenPublication) {
                def moduleName = 'Pay'
                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    // 该库所依赖的 libs-aar 模块下的三方 aar 需要使用项目单独下载依赖

                    setDependencyNode(root, 'compile', 'androidx.core', 'core-ktx', Versions.CORE_KTX)
                    setDependencyNode(root, 'compile', 'androidx.appcompat', 'appcompat', Versions.APPCOMPAT)

                    setDependencyNode(root, 'compile', 'com.tencent.mm.opensdk', 'wechat-sdk-android-without-mta', Versions.WEI_XIN_OPEN_SDK)
                    setDependencyNode(root, 'compile', 'com.google.code.gson', 'gson', Versions.GSON)

                    setScm(root)
                }
            }

            Umeng(MavenPublication) {
                def moduleName = 'Umeng'
                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId moduleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, 'compile', 'androidx.core', 'core-ktx', Versions.CORE_KTX)
                    setDependencyNode(root, 'compile', 'androidx.appcompat', 'appcompat', Versions.APPCOMPAT)

                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'common', '9.4.4')
                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'asms', '1.5.0')
                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'apm', '1.5.2')
                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'push', '6.4.8')
                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'share-core', '7.1.7')
                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'share-board', '7.1.7')
                    setDependencyNode(root, 'compile', 'com.umeng.umsdk', 'share-wx', '7.1.7')
                    setDependencyNode(root, 'compile', 'com.tencent.mm.opensdk', 'wechat-sdk-android-without-mta', Versions.WEI_XIN_OPEN_SDK)

                    setScm(root)
                }
            }
        }

        repositories {
            // 配置 GitHubPackages 仓库
            maven {
                name = "GitHubPackages"

                url GITHUB_REPOSITORY

                credentials {
                    username = GITHUB_USER
                    password = GITHUB_PERSONAL_ACCESS_TOKEN
                }
            }

            // 配置 GitLab 仓库
            maven {
                name = "GitLab"

                url GITLAB_REPOSITORY

                credentials(HttpHeaderCredentials) {
                    name = 'GitLab 个人访问 token'
                    value = GITLAB_PERSONAL_ACCESS_TOKEN
                }

                authentication {
                    header(HttpHeaderAuthentication)
                }

                allowInsecureProtocol = true
            }

            // 配置 YouMa 仓库
            maven {
                name = "YouMa"

                url 'http://maven.pm.youmatech.com/repository/maven-releases/'

                credentials {
                    username = 'youmaAdmin'
                    password = '0JjlsIO6BV'
                }

                allowInsecureProtocol = true
            }

            // 配置 MavenLocal 仓库
            mavenLocal()
        }
    }
}

task publishingToGitHubPackages() {
    description "打包至 GitHubPackages"
    group 'my-publishing'
    dependsOn ':publishAllPublicationsToGitHubPackagesRepository'

    doLast {
        printPublicationVersion()
        println "打包完成------> GitHubPackages:$GITHUB_REPOSITORY"
    }
}

task publishingToGitLab() {
    description "打包至 GitLab"
    group 'my-publishing'
    dependsOn ':publishAllPublicationsToGitLabRepository'

    doLast {
        printPublicationVersion()
        println "打包完成------> GitLab:$GITLAB_REPOSITORY"
    }
}

task publishingToYouMaMaven() {
    description "打包至 youma Maven"
    group 'my-publishing'
    dependsOn ':publishAllPublicationsToYouMaRepository'

    doLast {
        printPublicationVersion()
        println "打包完成------> youma Maven"
    }
}

task publishingToMavenLocal() {
    description "打包至 MavenLocal"
    group 'my-publishing'
    dependsOn ':publishToMavenLocal'

    doLast {
        printPublicationVersion()
        println "打包完成 ------>  MavenLocal"
    }
}
