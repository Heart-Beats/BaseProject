/**
 *  编译本地相关项目
 */
task buildSdk() {
    dependsOn gradle.includedBuild('uikit').task(':uikit:assembleRelease')
    dependsOn gradle.includedBuild('uikit').task(':uikit-res:assembleRelease')
    dependsOn gradle.includedBuild('uikit').task(':uikit-toast:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':base-api:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':base-app-res:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':base-ui:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':base-arch:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':utils:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':SDK:Pay:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Umeng:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:TencentCloud:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':SDK:shadow-lib:assemble')
    dependsOn gradle.includedBuild('project').task(':SDK:shadow-init:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':SDK:UniMP:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Navigation:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Web:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:ActivityResult:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:XLogInit:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:MMKVSharedPreferences:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:JsonUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Permission:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:PictureSelector:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:ImageLoad:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:DateUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:BitmapUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:MimeType:assemble')
    dependsOn gradle.includedBuild('project').task(':SDK:Download:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:QRCode:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Popup:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:SmsUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:PreviewFile:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Share:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:VideoPlayer:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Camera:assembleRelease')
}

//引入配置设置
apply from: 'publish_config.gradle'
apply plugin: 'maven-publish'

/**
 *
 * 设置 pom 文件的 dependencies节点
 *      别的项目依赖该 pom  文件时，会从 dependencies节点下根据 scope 来选择是否下载依赖库
 *
 *  scope 有如下取值：
 *      compile：      如果没有指定 scope 标签，maven 默认为这个范围。编译依赖关系在所有 classpath 中都可用。此外，这些依赖关系被传播到依赖项目
 *      provided：    与 compile 类似，但是表示您希望 jdk 或容器在运行时提供它(即系统类库)。它只适用于编译和测试 classpath，不可传递
 *      runtime：    此范围表示编译不需要依赖关系，而是用于执行。它是在运行时和测试 classpath，但不是编译 classpath
 *      test：      此范围表示正常使用应用程序不需要依赖关系，仅适用于测试编译和执行阶段。它不是传递的。
 *      system：   此范围与 provided 类似，除了您必须提供明确包含它的 jar。该 artifact 始终可用，并且不是在仓库中查找。
 *
 *      常用类比总结：
 *
 *       maven 中     |    gradle 中
 *       ---------------------------
 *        compile    |       api
 *       provided    |   compileOnly
 *       runtime     | implementation
 *
 */

enum Scope {
    /**
     *  类比 Gradle 中 api
     **/
    COMPILE('compile'),

    /**
     *  类比 Gradle 中 compileOnly
     **/
    PROVIDED('provided'),

    /**
     *  类比 Gradle 中 implementation
     **/
    RUNTIME('runtime'),

    TEST('test'),

    SYSTEM('system'),

    /**
     *  BOM 依赖中使用
     **/
    IMPORT('import')

    String pomScope

    Scope(String pomScope) {
        this.pomScope = pomScope
    }
}

def setBomDependencyNode(root, groupId, artifactId, version) {
    println "添加 BOM 依赖项： $groupId:$artifactId:$version"
    Node dependencyManagement
    NodeList dependencyManagementList = root.get('dependencyManagement')
    if (dependencyManagementList.size() == 0) {
        dependencyManagement = root.appendNode('dependencyManagement')
    } else {
        dependencyManagement = (Node) dependencyManagementList[0]
    }

    // dependencyManagement 节点里的依赖 scope  需要使用 import, 相关介绍见： https://www.cnblogs.com/niceshot/p/13747547.html
    setDependencyNode(dependencyManagement, Scope.IMPORT, groupId, artifactId, version)
}

def setDependencyNode(root, Scope scope, groupId, artifactId, version, Closure closure = null) {
    println "添加依赖项：  $scope ---> $groupId:$artifactId:$version"
    Node dependencies
    NodeList dependenciesList = root.get('dependencies')
    if (dependenciesList.size() == 0) {
        dependencies = root.appendNode('dependencies')
    } else {
        dependencies = (Node) dependenciesList[0]
    }

    dependencies.append(getDependencyNode(scope.pomScope, groupId, artifactId, version, closure))
}

/**
 *
 * 生成 Maven 依赖节点
 */
def getDependencyNode(scope, groupId, artifactId, version, Closure closure) {
    Node node = new Node(null, 'dependency')
    node.appendNode('scope', scope)
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    if (version != null) {
        // 可能为 BOM 里的依赖，不需要指定版本
        node.appendNode('version', version)
    }

    if (closure != null) {
        def exclusionsNode = new ExclusionsNode()
        closure.delegate = exclusionsNode
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure()

        addExclusionNode(node, exclusionsNode)
    }

    return node
}


def addExclusionNode(Node node, ExclusionsNode exclusionNode) {
    Node exclusions
    NodeList exclusionsList = node.get('exclusions')
    if (exclusionsList.size() == 0) {
        exclusions = node.appendNode('exclusions')
    } else {
        exclusions = (Node) exclusionsList[0]
    }

    exclusionNode.exclusionNodeList.each {
        def groupId = it.groupId
        def artifactId = it.artifactId

        println "排除依赖项：  $groupId:$artifactId"

        exclusions.append(getExclusionNode(groupId, artifactId))
    }
}

/**
 *
 * 生成 Maven 依赖排除节点
 */
def getExclusionNode(groupId, artifactId) {
    Node node = new Node(null, 'exclusion')
    if (groupId != null) {
        node.appendNode('groupId', groupId)
    }
    if (artifactId != null) {
        node.appendNode('artifactId', artifactId)
    }
    return node
}

/**
 *
 * 依赖节点中的排除元素（排除依赖）
 */
class ExclusionsNode {

    def exclusionNodeList = new HashSet<ExclusionNode>()

    void excludeGroup(String groupId) {
        exclude(groupId, null)
    }

    void excludeArtifact(String artifactId) {
        exclude(null, artifactId)
    }

    void exclude(String groupId, String artifactId) {
        def exclusionNode = new ExclusionNode(groupId, artifactId)
        exclusionNodeList.add(exclusionNode)
    }


    class ExclusionNode {
        String groupId
        String artifactId

        ExclusionNode(String groupId, String artifactId) {
            this.groupId = groupId
            this.artifactId = artifactId
        }
    }
}

/**
 *
 * 获取 git 提交编码
 */
static def gitShortRev() {
    def gitCommit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> gitCommit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return gitCommit
}

/**
 * pom 文件添加 scm 节点下的  connection 和  url 信息
 *
 */
def setScm(root) {
    def scm = root.appendNode('scm')
    scm.appendNode('connection', "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT_NAME}.git")

    def commit

    // 判断有没有CI 这个环境变量, 没有使用 git  的提交记录
    if ("${System.env.CI}".equalsIgnoreCase("true")) {
        commit = System.getenv("GITHUB_SHA")
    } else {
        commit = gitShortRev()
    }
    scm.appendNode('url', "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT_NAME}/commit/$commit")
}

/**
 * 设置发布依赖的 pom 文件名以及编译项目
 *
 *  pom.xml 配置文件具体使用说明见： https://juejin.cn/post/6844903824524574734#heading-6
 *
 */
def setGeneratePomFileAndDepends(publicationName) {
    model {
        // generatePomFileForPubNamePublication: 为名为PubName的发布创建一个POM文件，填充已知元数据，如项目名称、项目版本和依赖项。
        //                                          生成的POM文件默认放在 *build/publications/$pubName/pom-default.xml*.
        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
            destination = file("$buildDir/pom/$publicationName-pom.xml")
            dependsOn(buildSdk)
        }
    }
}

def sourceJar(String name, String path) {
    return tasks.create("source${name.capitalize()}Jar", Jar) {
        group = "publishing"
        description = "package ${name} source to jar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDirectory = file("$path/build/libs/")
        getArchiveClassifier().set('sources')
    }
}

def sourceAar(String name, String path) {
    return tasks.create("source${name.capitalize()}Aar", Jar) {
        group = "publishing"
        description = "package ${name} source to aar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDirectory = file("$path/build/libs/")
        getArchiveClassifier().set('sources')
    }
}

def printPublicationVersion() {
    println "publicationVersion:${getPublicationVersion()}"
}


setGeneratePomFileAndDepends('uikit')
setGeneratePomFileAndDepends('uikitRes')
setGeneratePomFileAndDepends('uikitToast')
setGeneratePomFileAndDepends('baseApi')
setGeneratePomFileAndDepends('baseAppRes')
setGeneratePomFileAndDepends('baseUi')
setGeneratePomFileAndDepends('baseArch')
setGeneratePomFileAndDepends('utils')
setGeneratePomFileAndDepends('Pay')
setGeneratePomFileAndDepends('Umeng')
setGeneratePomFileAndDepends('TencentCloud')
setGeneratePomFileAndDepends('shadowLib')
setGeneratePomFileAndDepends('shadowInit')
setGeneratePomFileAndDepends('Navigation')
setGeneratePomFileAndDepends('Web')
setGeneratePomFileAndDepends('ActivityResult')
setGeneratePomFileAndDepends('XLogInit')
setGeneratePomFileAndDepends('MMKVSharedPreferences')
setGeneratePomFileAndDepends('JsonUtil')
setGeneratePomFileAndDepends('Permission')
setGeneratePomFileAndDepends('PictureSelector')
setGeneratePomFileAndDepends('ImageLoad')
setGeneratePomFileAndDepends('DateUtil')
setGeneratePomFileAndDepends('BitmapUtil')
setGeneratePomFileAndDepends('MimeType')
setGeneratePomFileAndDepends('Download')
setGeneratePomFileAndDepends('QRCode')
setGeneratePomFileAndDepends('Popup')
setGeneratePomFileAndDepends('SmsUtil')
setGeneratePomFileAndDepends('PreviewFile')
setGeneratePomFileAndDepends('Share')
setGeneratePomFileAndDepends('VideoPlayer')
setGeneratePomFileAndDepends('Camera')

// 设置 UniApp 相关的 POM 文件
setUniAppGeneratePomFileAndDepends()

def setUniAppGeneratePomFileAndDepends() {
    setGeneratePomFileAndDepends('uniapp_base_oaid_sdk')
    setGeneratePomFileAndDepends('uniapp_breakpad_build_release')
    setGeneratePomFileAndDepends('uniapp_v8_release')
    setGeneratePomFileAndDepends('uniMPSDK_V2_release')
    setGeneratePomFileAndDepends('UniMP')
}


/**
 *  详情使用可见：  https://juejin.cn/post/6844904185754812423
 */
project.afterEvaluate {
    publishing {

        publications {

            //定义发布器的名称
            uikit(MavenPublication) {
                def moduleName = 'uikit'
                def publishModuleName = 'uikit'

                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar") //指定 jar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uikit-res', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uikit-toast', getPublicationVersion())

                    // 添加相关依赖库，缺失会导致运行时无法找到对应类
                    setDependencyNode(root, Scope.COMPILE, 'org.jetbrains.kotlin', 'kotlin-stdlib', libs.versions.kotlin.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.core', 'core-ktx', libs.versions.coreKtx.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.recyclerview', 'recyclerview', libs.versions.recyclerview.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.fragment', 'fragment-ktx', libs.versions.fragment.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.constraintlayout', 'constraintlayout', libs.versions.constraintLayout.get())
                    setDependencyNode(root, Scope.COMPILE, 'org.jetbrains.kotlinx', 'kotlinx-coroutines-core', libs.versions.kotlinCoroutines.get())
                    setDependencyNode(root, Scope.COMPILE, 'org.jetbrains.kotlinx', 'kotlinx-coroutines-android', libs.versions.kotlinCoroutines.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.google.android.material', 'material', libs.versions.material.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.github.zyyoona7', 'wheelview', '1.0.7')
                    setDependencyNode(root, Scope.COMPILE, 'com.github.zyyoona7', 'pickerview', '1.0.9')
                    setDependencyNode(root, Scope.COMPILE, 'com.airbnb.android', 'lottie', libs.versions.lottie.get())
                    setDependencyNode(root, Scope.COMPILE, 'io.github.scwang90', 'refresh-layout-kernel', libs.versions.smartRefreshLayout.get())
                    setDependencyNode(root, Scope.COMPILE, 'io.github.lucksiege', 'pictureselector', libs.versions.pictureSelector.get())
                    setDependencyNode(root, Scope.COMPILE, 'io.github.lucksiege', 'compress', libs.versions.pictureSelector.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.github.bumptech.glide', 'glide', libs.versions.glide.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.github.getActivity', 'ShapeView', libs.versions.shapeView.get())
                    setScm(root)
                }
            }

            uikitRes(MavenPublication) {
                def moduleName = 'uikit-res'
                def publishModuleName = 'uikit-res'

                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uikitToast(MavenPublication) {
                def moduleName = 'uikit-toast'
                def publishModuleName = 'uikit-toast'

                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, 'provided ', 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setScm(root)
                }
            }

            baseApi(MavenPublication) {
                def moduleName = 'base-api'
                def publishModuleName = 'base-api'

                def modulePath = "$libProjectPath/base/api"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, 'org.jetbrains.kotlin', 'kotlin-stdlib', libs.versions.kotlin.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.squareup.retrofit2', 'retrofit', libs.versions.retrofit.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.squareup.retrofit2', 'converter-gson', libs.versions.retrofit.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.squareup.retrofit2', 'adapter-rxjava3', libs.versions.retrofit.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.squareup.okhttp3', 'logging-interceptor', libs.versions.okhttp.get())
                    setScm(root)
                }
            }


            baseAppRes(MavenPublication) {
                def moduleName = 'base-app-res'
                def publishModuleName = 'base-app-res'

                def modulePath = "$libProjectPath/base/app-res"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            baseUi(MavenPublication) {
                def moduleName = 'base-ui'
                def publishModuleName = 'base-ui'

                def modulePath = "$libProjectPath/base/ui"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.activity', 'activity', libs.versions.activity.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.fragment', 'fragment', libs.versions.fragment.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.activity', 'activity-ktx', libs.versions.activity.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.fragment', 'fragment-ktx', libs.versions.fragment.get())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.databinding', 'viewbinding', libs.versions.dataBinding.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.geyifeng.immersionbar', 'immersionbar', libs.versions.immersionBar.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.geyifeng.immersionbar', 'immersionbar-ktx', libs.versions.immersionBar.get())

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uikit-toast', getPublicationVersion())

                    setBomDependencyNode(root, 'androidx.compose', 'compose-bom', libs.versions.jetpackComposeBom.get())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.compose.ui', 'ui', null)
                    setScm(root)
                }
            }

            baseArch(MavenPublication) {
                def moduleName = 'base-arch'
                def publishModuleName = 'base-arch'

                def modulePath = "$libProjectPath/base/arch"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'utils', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'navigation', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'umeng', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.collection', 'collection-ktx', libs.versions.collectionKtx.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.recyclerview', 'recyclerview', libs.versions.recyclerview.get())


                    setDependencyNode(root, Scope.COMPILE, 'androidx.compose.material3', 'material3', null)
                    setDependencyNode(root, Scope.COMPILE, 'androidx.compose.ui', 'ui-tooling-preview', null)
                    setDependencyNode(root, Scope.COMPILE, 'androidx.compose.ui', 'ui-tooling', null)
                    setDependencyNode(root, Scope.COMPILE, 'androidx.activity', 'activity-compose', libs.versions.activity.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.lifecycle', 'lifecycle-viewmodel-compose', libs.versions.lifecycle.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.lifecycle', 'lifecycle-runtime-compose', libs.versions.lifecycle.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.navigation', 'navigation-compose', libs.versions.navigation.get())

                    setScm(root)
                }
            }

            utils(MavenPublication) {
                def moduleName = 'utils'
                def publishModuleName = 'utils'

                def modulePath = "$libProjectPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-app-res', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'activity-result', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'xlog-init', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'image-load', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'date-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'mime-type', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'popup', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.activity', 'activity', libs.versions.activity.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.fragment', 'fragment', libs.versions.fragment.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.activity', 'activity-ktx', libs.versions.activity.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.fragment', 'fragment-ktx', libs.versions.fragment.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.google.android.material', 'material', libs.versions.material.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.databinding', 'databinding-runtime', libs.versions.dataBinding.get())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.lifecycle', 'lifecycle-extensions', '2.2.0')
                    setDependencyNode(root, Scope.COMPILE, 'androidx.lifecycle', 'lifecycle-viewmodel-ktx', libs.versions.lifecycle.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.lifecycle', 'lifecycle-livedata-ktx', libs.versions.lifecycle.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.lifecycle', 'lifecycle-runtime-ktx', libs.versions.lifecycle.get())

                    setDependencyNode(root, Scope.COMPILE, 'io.github.youth5201314', 'banner', libs.versions.banner.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.teprinciple', 'updateapputilsx', libs.versions.updateAppUtilsx.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.blankj', 'utilcodex', libs.versions.utilCodeX.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.squareup.okhttp3', 'okhttp', libs.versions.okhttp.get())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.palette', 'palette-ktx', libs.versions.palette.get())

                    setScm(root)
                }
            }

            Pay(MavenPublication) {
                def moduleName = 'Pay'
                def publishModuleName = 'pay'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, 'androidx.core', 'core-ktx', libs.versions.coreKtx.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.alipay.sdk', 'alipaysdk-android', libs.versions.aliPay.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.mm.opensdk', 'wechat-sdk-android-without-mta', libs.versions.weiXinOpenSdk.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.google.code.gson', 'gson', libs.versions.gson.get())

                    setScm(root)
                }
            }

            Umeng(MavenPublication) {
                def moduleName = 'Umeng'
                def publishModuleName = 'umeng'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, 'androidx.core', 'core-ktx', libs.versions.coreKtx.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.umeng.umsdk', 'common', '9.6.1')
                    setDependencyNode(root, Scope.COMPILE, 'com.umeng.umsdk', 'asms', '1.8.0')
                    setDependencyNode(root, Scope.COMPILE, 'com.umeng.umsdk', 'apm', '1.7.0')
                    setDependencyNode(root, Scope.COMPILE, 'com.umeng.umsdk', 'push', '6.5.9')

                    def umengShareVersion = '7.3.2'
                    setDependencyNode(root, Scope.COMPILE, 'com.umeng.umsdk', 'share-core', umengShareVersion)
                    setDependencyNode(root, Scope.COMPILE, 'com.umeng.umsdk', 'share-wx', umengShareVersion)
                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.mm.opensdk', 'wechat-sdk-android-without-mta', libs.versions.weiXinOpenSdk.get())

                    setScm(root)
                }
            }

            TencentCloud(MavenPublication) {
                def moduleName = 'TencentCloud'
                def publishModuleName = 'tencent-cloud'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, 'androidx.core', 'core-ktx', libs.versions.coreKtx.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.qcloud.cos', 'cos-android-lite', libs.versions.tencentCos.get())

                    setScm(root)
                }
            }

            shadowLib(MavenPublication) {
                def moduleName = 'shadow-lib'
                def publishModuleName = 'shadow-lib'

                def modulePath = "$libProjectPath/SDK/Shadow/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                // 非 aar 包的相关路径定义
                artifact("$modulePath/build/libs/${moduleName}.jar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, 'org.jetbrains.kotlin', 'kotlin-stdlib', libs.versions.kotlin.get())

                    setScm(root)
                }
            }

            shadowInit(MavenPublication) {
                def moduleName = 'shadow-init'
                def publishModuleName = 'shadow-init'

                def modulePath = "$libProjectPath/SDK/Shadow/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, 'org.jetbrains.kotlin', 'kotlin-stdlib', libs.versions.kotlin.get())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'shadow-lib', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.shadow.dynamic', 'host', libs.versions.shadow.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.shadow.core', 'activity-container', libs.versions.shadow.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.shadow.dynamic', 'manager', libs.versions.shadow.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.shadow.dynamic', 'host-multi-loader-ext', libs.versions.shadow.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.shadow.dynamic', 'manager-multi-loader-ext', libs.versions.shadow.get())

                    setScm(root)
                }
            }

            Navigation(MavenPublication) {
                def moduleName = 'Navigation'
                def publishModuleName = 'navigation'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.activity', 'activity-ktx', libs.versions.activity.get())
                    setDependencyNode(root, Scope.RUNTIME, 'com.google.android.material', 'material', libs.versions.material.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.kunminx.arch', 'smooth-navigation', libs.versions.smoothNavigation.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.navigation', 'navigation-fragment-ktx', libs.versions.navigation.get()) {
                        exclude('androidx.navigation', 'navigation-fragment')
                    }
                    setDependencyNode(root, Scope.COMPILE, 'androidx.navigation', 'navigation-ui', libs.versions.navigation.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.navigation', 'navigation-ui-ktx', libs.versions.navigation.get())

                    setScm(root)
                }
            }

            Web(MavenPublication) {
                def moduleName = 'Web'
                def publishModuleName = 'web'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'activity-result', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'xlog-init', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'umeng', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'picture-selector', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'date-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'bitmap-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'download', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'qrcode', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'popup', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'sms-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'preview-file', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'com.github.lzyzsd', 'jsbridge', libs.versions.jsBridge.get())

                    setScm(root)
                }
            }


            ActivityResult(MavenPublication) {
                def moduleName = 'ActivityResult'
                def publishModuleName = 'activity-result'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, 'androidx.activity', 'activity-ktx', libs.versions.activity.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.fragment', 'fragment-ktx', libs.versions.fragment.get())
                    setScm(root)
                }
            }

            XLogInit(MavenPublication) {
                def moduleName = 'XLogInit'
                def publishModuleName = 'xlog-init'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, 'com.elvishew', 'xlog', libs.versions.xlog.get())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'mmkv-sp', getPublicationVersion())
                    setScm(root)
                }
            }

            MMKVSharedPreferences(MavenPublication) {
                def moduleName = 'MMKVSharedPreferences'
                def publishModuleName = 'mmkv-sp'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, 'androidx.startup', 'startup-runtime', libs.versions.startup.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.security', 'security-crypto', libs.versions.securityCrypto.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.core', 'core-ktx', libs.versions.coreKtx.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.tencent', 'mmkv', libs.versions.mmkv.get())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'json-util', getPublicationVersion())
                    setScm(root)
                }
            }

            JsonUtil(MavenPublication) {
                def moduleName = 'JsonUtil'
                def publishModuleName = 'json-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, 'com.google.code.gson', 'gson', libs.versions.gson.get())
                    setScm(root)
                }
            }

            Permission(MavenPublication) {
                def moduleName = 'Permission'
                def publishModuleName = 'permission'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.activity', 'activity', libs.versions.activity.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.fragment', 'fragment', libs.versions.fragment.get())
                    setDependencyNode(root, Scope.RUNTIME, 'com.guolindev.permissionx', 'permissionx', libs.versions.permissionX.get())
                    setScm(root)
                }
            }

            PictureSelector(MavenPublication) {
                def moduleName = 'PictureSelector'
                def publishModuleName = 'picture-selector'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'image-load', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'io.github.lucksiege', 'pictureselector', libs.versions.pictureSelector.get())
                    setDependencyNode(root, Scope.COMPILE, 'io.github.lucksiege', 'compress', libs.versions.pictureSelector.get())
                    setDependencyNode(root, Scope.COMPILE, 'io.github.lucksiege', 'ucrop', libs.versions.pictureSelector.get())
                    setScm(root)
                }
            }

            ImageLoad(MavenPublication) {
                def moduleName = 'ImageLoad'
                def publishModuleName = 'image-load'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, 'com.github.bumptech.glide', 'glide', libs.versions.glide.get())
                    setScm(root)
                }
            }

            DateUtil(MavenPublication) {
                def moduleName = 'DateUtil'
                def publishModuleName = 'date-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.annotation', 'annotation', libs.versions.annotation.get())
                    setScm(root)
                }
            }

            BitmapUtil(MavenPublication) {
                def moduleName = 'BitmapUtil'
                def publishModuleName = 'bitmap-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'mime-type', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, 'com.blankj', 'utilcodex', libs.versions.utilCodeX.get())
                    setScm(root)
                }
            }

            MimeType(MavenPublication) {
                def moduleName = 'MimeType'
                def publishModuleName = 'mime-type'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                // 非 aar 包的相关路径定义
                artifact("$modulePath/build/libs/${moduleName}.jar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {

                }
            }

            Download(MavenPublication) {
                def moduleName = 'Download'
                def publishModuleName = 'download'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.activity', 'activity', libs.versions.activity.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.fragment', 'fragment', libs.versions.fragment.get())

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'xlog-init', getPublicationVersion())

                    setDependencyNode(root, Scope.RUNTIME, 'com.squareup.okhttp3', 'okhttp', libs.versions.okhttp.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.github.getActivity', 'EasyHttp', libs.versions.easyHttp.get())
                    setScm(root)
                }
            }

            QRCode(MavenPublication) {
                def moduleName = 'QRCode'
                def publishModuleName = 'qrcode'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'activity-result', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.github.jenly1314', 'zxing-lite', libs.versions.zxingLite.
                            get())

                    setScm(root)
                }
            }

            Popup(MavenPublication) {
                def moduleName = 'Popup'
                def publishModuleName = 'popup'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.recyclerview', 'recyclerview', libs.versions.recyclerview.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.google.android.material', 'material', libs.versions.material.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.github.li-xiaojun', 'XPopup', libs.versions.xpopup.get())

                    setScm(root)
                }
            }

            SmsUtil(MavenPublication) {
                def moduleName = 'SmsUtil'
                def publishModuleName = 'sms-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, 'androidx.activity', 'activity', libs.versions.activity.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.fragment', 'fragment', libs.versions.fragment.get())

                    setScm(root)
                }
            }

            PreviewFile(MavenPublication) {
                def moduleName = 'PreviewFile'
                def publishModuleName = 'preview-file'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'base-app-res', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'xlog-init', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'mime-type', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'image-load', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'download', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'popup', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'share', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'video-player', getPublicationVersion())

                    setDependencyNode(root, Scope.RUNTIME, 'com.squareup.okhttp3', 'okhttp', libs.versions.okhttp.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.tencent.tbs', 'tbssdk', libs.versions.tbsSdk.get())

                    setScm(root)
                }
            }

            Share(MavenPublication) {
                def moduleName = 'Share'
                def publishModuleName = 'share'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, 'androidx.core', 'core-ktx', libs.versions.coreKtx.get())

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'mime-type', getPublicationVersion())

                    setScm(root)
                }
            }

            VideoPlayer(MavenPublication) {
                def moduleName = 'VideoPlayer'
                def publishModuleName = 'video-player'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, 'androidx.activity', 'activity', libs.versions.activity.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.fragment', 'fragment', libs.versions.fragment.get())

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'ImageLoad', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'com.github.CarGuo.GSYVideoPlayer', 'GSYVideoPlayer', libs.versions.gsyVideoPlayer.get())

                    setScm(root)
                }
            }

            Camera(MavenPublication) {
                def moduleName = 'Camera'
                def publishModuleName = 'camera'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'cjt.library.wheel', 'camera', libs.versions.cameraView.get())

                    setScm(root)
                }
            }

            uniapp_base_oaid_sdk(MavenPublication) {
                def moduleName = 'base-oaid-sdk-aar'
                def publishModuleName = 'uniapp-base-oaid-sdk'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/base-oaid-sdk.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uniapp_breakpad_build_release(MavenPublication) {
                def moduleName = 'breakpad-build-release-aar'
                def publishModuleName = 'uniapp-breakpad-build-release'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/breakpad-build-release.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uniapp_v8_release(MavenPublication) {
                def moduleName = 'uniapp-v8-release-aar'
                def publishModuleName = 'uniapp-v8-release'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/uniapp-v8-release.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uniMPSDK_V2_release(MavenPublication) {
                def moduleName = 'uniMPSDK-V2-release-aar'
                def publishModuleName = 'uniMPSDK-V2-release'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/uniMPSDK-V2-release.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }


            UniMP(MavenPublication) {
                def moduleName = 'UniMP'
                def publishModuleName = 'uni-mp'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                // 非 aar 包的相关路径定义
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniapp-base-oaid-sdk', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniapp-breakpad-build-release', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniapp-v8-release', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniMPSDK-V2-release', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, 'androidx.recyclerview', 'recyclerview', libs.versions.recyclerview.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.legacy', 'legacy-support-v4', '1.0.0')
                    setDependencyNode(root, Scope.COMPILE, 'androidx.appcompat', 'appcompat', libs.versions.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, 'com.alibaba', 'fastjson', libs.versions.fastJson.get())

                    def fresco_version = '2.5.0'
                    setDependencyNode(root, Scope.COMPILE, 'com.facebook.fresco', 'fresco', fresco_version)
                    setDependencyNode(root, Scope.COMPILE, 'com.facebook.fresco', 'animated-gif', fresco_version)

                    setDependencyNode(root, Scope.COMPILE, 'com.github.bumptech.glide', 'glide', libs.versions.glide.get())
                    setDependencyNode(root, Scope.COMPILE, 'pl.droidsonroids.gif', 'android-gif-drawable', libs.versions.androidGifDrawable.get())
                    setDependencyNode(root, Scope.COMPILE, 'androidx.webkit', 'webkit', '1.3.0')

                    setScm(root)
                }
            }
        }

        repositories {
            // 配置 GitHubPackages 仓库
            maven {
                name = "GitHubPackages"

                url GITHUB_REPOSITORY

                credentials {
                    username = GITHUB_USER
                    password = GITHUB_PERSONAL_ACCESS_TOKEN
                }
            }

            // 配置 MavenLocal 仓库
            mavenLocal()
        }
    }
}

task publishingToGitHubPackages() {
    description "打包至 GitHubPackages"
    group 'my-publishing'
    dependsOn ':publishAllPublicationsToGitHubPackagesRepository'

    doLast {
        printPublicationVersion()
        println "打包完成------> GitHubPackages:$GITHUB_REPOSITORY"
    }
}

task publishingToMavenLocal() {
    description "打包至 MavenLocal"
    group 'my-publishing'
    dependsOn ':publishToMavenLocal'

    doLast {
        printPublicationVersion()
        println "打包完成 ------>  MavenLocal"
    }
}
