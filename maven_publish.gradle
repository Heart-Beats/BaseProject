/**
 *  编译本地相关项目
 */
task buildSdk() {
    dependsOn gradle.includedBuild('uikit').task(':uikit:assembleRelease')
    dependsOn gradle.includedBuild('uikit').task(':uikit-res:assembleRelease')
    dependsOn gradle.includedBuild('uikit').task(':uikit-toast:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':base-api:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':base-app-res:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':base-ui:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':base-arch:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':utils:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':SDK:Pay:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Umeng:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:TencentCloud:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':SDK:shadow-lib:assemble')
    dependsOn gradle.includedBuild('project').task(':SDK:shadow-init:assembleRelease')

    dependsOn gradle.includedBuild('project').task(':SDK:UniMP:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Navigation:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Web:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:ActivityResult:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:XLogInit:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:MMKVSharedPreferences:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:JsonUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Permission:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:PictureSelector:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:ImageLoad:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:DateUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:BitmapUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:MimeType:assemble')
    dependsOn gradle.includedBuild('project').task(':SDK:Download:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:QRCode:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Popup:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:SmsUtil:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:PreviewFile:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Share:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:VideoPlayer:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Camera:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Update:assembleRelease')
    dependsOn gradle.includedBuild('project').task(':SDK:Banner:assembleRelease')
}

//引入配置设置
apply from: 'publish_config.gradle'
apply plugin: 'maven-publish'

/**
 *
 * 设置 pom 文件的 dependencies节点
 *      别的项目依赖该 pom  文件时，会从 dependencies节点下根据 scope 来选择是否下载依赖库
 *
 *  scope 有如下取值：
 *      compile：      如果没有指定 scope 标签，maven 默认为这个范围。编译依赖关系在所有 classpath 中都可用。此外，这些依赖关系被传播到依赖项目
 *      provided：    与 compile 类似，但是表示您希望 jdk 或容器在运行时提供它(即系统类库)。它只适用于编译和测试 classpath，不可传递
 *      runtime：    此范围表示编译不需要依赖关系，而是用于执行。它是在运行时和测试 classpath，但不是编译 classpath
 *      test：      此范围表示正常使用应用程序不需要依赖关系，仅适用于测试编译和执行阶段。它不是传递的。
 *      system：   此范围与 provided 类似，除了您必须提供明确包含它的 jar。该 artifact 始终可用，并且不是在仓库中查找。
 *
 *      常用类比总结：
 *
 *       maven 中     |    gradle 中
 *       ---------------------------
 *        compile    |       api
 *       provided    |   compileOnly
 *       runtime     | implementation
 *
 */

enum Scope {
    /**
     *  类比 Gradle 中 api
     **/
    COMPILE('compile'),

    /**
     *  类比 Gradle 中 compileOnly
     **/
    PROVIDED('provided'),

    /**
     *  类比 Gradle 中 implementation
     **/
    RUNTIME('runtime'),

    TEST('test'),

    SYSTEM('system'),

    /**
     *  BOM 依赖中使用
     **/
    IMPORT('import')

    String pomScope

    Scope(String pomScope) {
        this.pomScope = pomScope
    }
}

/**
 * 添加 BOM 依赖节点
 *
 * @param root 根节点
 * @param mavenDependence 依赖的坐标
 * */
def setBomDependencyNode(root, MinimalExternalModuleDependency mavenDependence) {
    println "添加 BOM 依赖项： $mavenDependence"
    Node dependencyManagement
    NodeList dependencyManagementList = root.get('dependencyManagement')
    if (dependencyManagementList.size() == 0) {
        dependencyManagement = root.appendNode('dependencyManagement')
    } else {
        dependencyManagement = (Node) dependencyManagementList[0]
    }

    // dependencyManagement 节点里的依赖 scope  需要使用 import, 相关介绍见： https://www.cnblogs.com/niceshot/p/13747547.html
    setDependencyNode(dependencyManagement, Scope.IMPORT, mavenDependence)
}


def setBomDependencyNode(root, groupId, artifactId, version) {
    println "添加 BOM 依赖项： $groupId:$artifactId:$version"
    Node dependencyManagement
    NodeList dependencyManagementList = root.get('dependencyManagement')
    if (dependencyManagementList.size() == 0) {
        dependencyManagement = root.appendNode('dependencyManagement')
    } else {
        dependencyManagement = (Node) dependencyManagementList[0]
    }

    // dependencyManagement 节点里的依赖 scope  需要使用 import, 相关介绍见： https://www.cnblogs.com/niceshot/p/13747547.html
    setDependencyNode(dependencyManagement, Scope.IMPORT, groupId, artifactId, version)
}


/**
 * 添加依赖节点
 *
 * @param root 根节点
 * @param scope 依赖的 scope
 * @param mavenDependence 依赖的坐标
 * @param closure 依赖的配置
 * */
def setDependencyNode(root, Scope scope, MinimalExternalModuleDependency mavenDependence, Closure closure = null) {
    String groupId = mavenDependence.group
    String artifactId = mavenDependence.name
    String version = mavenDependence.version
    setDependencyNode(root, scope, groupId, artifactId, version, closure)
}

def setDependencyNode(root, Scope scope, groupId, artifactId, version, Closure closure = null) {
    println "添加依赖项：  $scope ---> $groupId:$artifactId:$version"
    Node dependencies
    NodeList dependenciesList = root.get('dependencies')
    if (dependenciesList.size() == 0) {
        dependencies = root.appendNode('dependencies')
    } else {
        dependencies = (Node) dependenciesList[0]
    }

    dependencies.append(getDependencyNode(scope.pomScope, groupId, artifactId, version, closure))
}

/**
 *
 * 生成 Maven 依赖节点
 */
def getDependencyNode(scope, groupId, artifactId, version, Closure closure) {
    Node node = new Node(null, 'dependency')
    node.appendNode('scope', scope)
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    if (version != null) {
        // 可能为 BOM 里的依赖，不需要指定版本
        node.appendNode('version', version)
    }

    if (closure != null) {
        def exclusionsNode = new ExclusionsNode()
        closure.delegate = exclusionsNode
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure()

        addExclusionNode(node, exclusionsNode)
    }

    return node
}


def addExclusionNode(Node node, ExclusionsNode exclusionNode) {
    Node exclusions
    NodeList exclusionsList = node.get('exclusions')
    if (exclusionsList.size() == 0) {
        exclusions = node.appendNode('exclusions')
    } else {
        exclusions = (Node) exclusionsList[0]
    }

    exclusionNode.exclusionNodeList.each {
        def groupId = it.groupId
        def artifactId = it.artifactId

        println "排除依赖项：  $groupId:$artifactId"

        exclusions.append(getExclusionNode(groupId, artifactId))
    }
}

/**
 *
 * 生成 Maven 依赖排除节点
 */
def getExclusionNode(groupId, artifactId) {
    Node node = new Node(null, 'exclusion')
    if (groupId != null) {
        node.appendNode('groupId', groupId)
    }
    if (artifactId != null) {
        node.appendNode('artifactId', artifactId)
    }
    return node
}

/**
 *
 * 依赖节点中的排除元素（排除依赖）
 */
class ExclusionsNode {

    def exclusionNodeList = new HashSet<ExclusionNode>()

    void excludeGroup(String groupId) {
        exclude(groupId, null)
    }

    void excludeArtifact(String artifactId) {
        exclude(null, artifactId)
    }

    void exclude(String groupId, String artifactId) {
        def exclusionNode = new ExclusionNode(groupId, artifactId)
        exclusionNodeList.add(exclusionNode)
    }


    class ExclusionNode {
        String groupId
        String artifactId

        ExclusionNode(String groupId, String artifactId) {
            this.groupId = groupId
            this.artifactId = artifactId
        }
    }
}

/**
 *
 * 获取 git 提交编码
 */
static def gitShortRev() {
    def gitCommit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> gitCommit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return gitCommit
}

/**
 * pom 文件添加 scm 节点下的  connection 和  url 信息
 *
 */
def setScm(root) {
    def scm = root.appendNode('scm')
    scm.appendNode('connection', "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT_NAME}.git")

    def commit

    // 判断有没有CI 这个环境变量, 没有使用 git  的提交记录
    if ("${System.env.CI}".equalsIgnoreCase("true")) {
        commit = System.getenv("GITHUB_SHA")
    } else {
        commit = gitShortRev()
    }
    scm.appendNode('url', "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT_NAME}/commit/$commit")
}

/**
 * 设置发布依赖的 pom 文件名以及编译项目
 *
 *  pom.xml 配置文件具体使用说明见： https://juejin.cn/post/6844903824524574734#heading-6
 *
 */
def setGeneratePomFileAndDepends(publicationName) {
    model {
        // generatePomFileForPubNamePublication: 为名为PubName的发布创建一个POM文件，填充已知元数据，如项目名称、项目版本和依赖项。
        //                                          生成的POM文件默认放在 *build/publications/$pubName/pom-default.xml*.
        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
            destination = file("$buildDir/pom/$publicationName-pom.xml")
            dependsOn(buildSdk)
        }
    }
}

def sourceJar(String name, String path) {
    return tasks.create("source${name.capitalize()}Jar", Jar) {
        group = "publishing"
        description = "package ${name} source to jar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDirectory = file("$path/build/libs/")
        getArchiveClassifier().set('sources')
    }
}

def sourceAar(String name, String path) {
    return tasks.create("source${name.capitalize()}Aar", Jar) {
        group = "publishing"
        description = "package ${name} source to aar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDirectory = file("$path/build/libs/")
        getArchiveClassifier().set('sources')
    }
}

def printPublicationVersion() {
    println "publicationVersion:${getPublicationVersion()}"
}


setGeneratePomFileAndDepends('uikit')
setGeneratePomFileAndDepends('uikitRes')
setGeneratePomFileAndDepends('uikitToast')
setGeneratePomFileAndDepends('baseApi')
setGeneratePomFileAndDepends('baseAppRes')
setGeneratePomFileAndDepends('baseUi')
setGeneratePomFileAndDepends('baseArch')
setGeneratePomFileAndDepends('utils')
setGeneratePomFileAndDepends('Pay')
setGeneratePomFileAndDepends('Umeng')
setGeneratePomFileAndDepends('TencentCloud')
setGeneratePomFileAndDepends('shadowLib')
setGeneratePomFileAndDepends('shadowInit')
setGeneratePomFileAndDepends('Navigation')
setGeneratePomFileAndDepends('Web')
setGeneratePomFileAndDepends('ActivityResult')
setGeneratePomFileAndDepends('XLogInit')
setGeneratePomFileAndDepends('MMKVSharedPreferences')
setGeneratePomFileAndDepends('JsonUtil')
setGeneratePomFileAndDepends('Permission')
setGeneratePomFileAndDepends('PictureSelector')
setGeneratePomFileAndDepends('ImageLoad')
setGeneratePomFileAndDepends('DateUtil')
setGeneratePomFileAndDepends('BitmapUtil')
setGeneratePomFileAndDepends('MimeType')
setGeneratePomFileAndDepends('Download')
setGeneratePomFileAndDepends('QRCode')
setGeneratePomFileAndDepends('Popup')
setGeneratePomFileAndDepends('SmsUtil')
setGeneratePomFileAndDepends('PreviewFile')
setGeneratePomFileAndDepends('Share')
setGeneratePomFileAndDepends('VideoPlayer')
setGeneratePomFileAndDepends('Camera')
setGeneratePomFileAndDepends('Update')
setGeneratePomFileAndDepends('Banner')

// 设置 UniApp 相关的 POM 文件
setUniAppGeneratePomFileAndDepends()

def setUniAppGeneratePomFileAndDepends() {
    setGeneratePomFileAndDepends('uniapp_base_oaid_sdk')
    setGeneratePomFileAndDepends('uniapp_breakpad_build_release')
    setGeneratePomFileAndDepends('uniapp_v8_release')
    setGeneratePomFileAndDepends('uniMPSDK_V2_release')
    setGeneratePomFileAndDepends('UniMP')
}


/**
 *  详情使用可见：  https://juejin.cn/post/6844904185754812423
 */
project.afterEvaluate {
    publishing {

        publications {

            //定义发布器的名称
            uikit(MavenPublication) {
                def moduleName = 'uikit'
                def publishModuleName = 'uikit'

                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar") //指定 jar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uikit-res', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uikit-toast', getPublicationVersion())

                    // 添加相关依赖库，缺失会导致运行时无法找到对应类
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.core.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.fragment.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.kotlinx.coroutines.android.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.recyclerview.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.constraintlayout.get())
                    setDependencyNode(root, Scope.COMPILE, libs.material.get())

                    setDependencyNode(root, Scope.COMPILE, 'com.github.zyyoona7', 'wheelview', '1.0.9')
                    setDependencyNode(root, Scope.COMPILE, 'com.github.zyyoona7', 'pickerview', '1.0.9')

                    setDependencyNode(root, Scope.COMPILE, libs.lottie.get())
                    setDependencyNode(root, Scope.COMPILE, libs.smartRefreshLayout.kernel.get())
                    setDependencyNode(root, Scope.COMPILE, libs.pickSelector.picture.selector.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.pickSelector.picture.selector.compress.get())

                    setDependencyNode(root, Scope.RUNTIME, libs.glide.asProvider().get())
                    setDependencyNode(root, Scope.RUNTIME, libs.permissionX.get())

                    setDependencyNode(root, Scope.COMPILE, libs.shapeView.get())

                    setScm(root)
                }
            }

            uikitRes(MavenPublication) {
                def moduleName = 'uikit-res'
                def publishModuleName = 'uikit-res'

                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uikitToast(MavenPublication) {
                def moduleName = 'uikit-toast'
                def publishModuleName = 'uikit-toast'

                def modulePath = "$libUikitPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())
                    setScm(root)
                }
            }

            baseApi(MavenPublication) {
                def moduleName = 'base-api'
                def publishModuleName = 'base-api'

                def modulePath = "$libProjectPath/base/api"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, libs.retrofit.retrofit.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.retrofit.converter.gson.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.retrofit.adapter.rxjava3.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.okHttp.logging.interceptor.get())

                    setDependencyNode(root, Scope.RUNTIME, libs.kotlinx.coroutines.android.get())
                    setScm(root)
                }
            }


            baseAppRes(MavenPublication) {
                def moduleName = 'base-app-res'
                def publishModuleName = 'base-app-res'

                def modulePath = "$libProjectPath/base/app-res"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            baseUi(MavenPublication) {
                def moduleName = 'base-ui'
                def publishModuleName = 'base-ui'

                def modulePath = "$libProjectPath/base/ui"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, libs.androidx.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.activity.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.fragment.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.activity.ktx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.fragment.ktx.get())

                    setDependencyNode(root, Scope.COMPILE, libs.androidx.view.binding.get())

                    setDependencyNode(root, Scope.COMPILE, libs.statusbar.immersionbar.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.statusbar.immersionbar.ktx.get())

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uikit-toast', getPublicationVersion())

                    setBomDependencyNode(root, libs.jetpack.compose.bom.get())

                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.compose.ui.asProvider().get())
                    setScm(root)
                }
            }

            baseArch(MavenPublication) {
                def moduleName = 'base-arch'
                def publishModuleName = 'base-arch'

                def modulePath = "$libProjectPath/base/arch"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-api', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'utils', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'navigation', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.androidx.collection.ktx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.recyclerview.get())

                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.compose.material3.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.compose.ui.tooling.preview.get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.compose.ui.tooling.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.activity.compose.get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.lifecycle.viewmodel.compose.get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.lifecycle.runtime.compose.get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.navigation.compose.get())

                    setScm(root)
                }
            }

            utils(MavenPublication) {
                def moduleName = 'utils'
                def publishModuleName = 'utils'

                def modulePath = "$libProjectPath/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-app-res', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'activity-result', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'xlog-init', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'popup', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'image-load', getPublicationVersion())

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.activity.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.fragment.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.material.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.databinding.runtime.get())

                    setDependencyNode(root, Scope.COMPILE, libs.androidx.lifecycle.extensions.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.lifecycle.livedata.ktx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.lifecycle.viewmodel.ktx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.palette.ktx.get())

                    setDependencyNode(root, Scope.COMPILE, libs.utilCodeX.get())

                    setScm(root)
                }
            }

            Pay(MavenPublication) {
                def moduleName = 'Pay'
                def publishModuleName = 'pay'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.core.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())

                    setDependencyNode(root, Scope.RUNTIME, libs.aliPaySdk.get())

                    setDependencyNode(root, Scope.RUNTIME, libs.weiXinOpenSdk.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.gson.get())

                    setScm(root)
                }
            }

            Umeng(MavenPublication) {
                def moduleName = 'Umeng'
                def publishModuleName = 'umeng'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.core.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())

                    setDependencyNode(root, Scope.COMPILE, libs.umeng.common.get())
                    setDependencyNode(root, Scope.COMPILE, libs.umeng.asms.get())
                    setDependencyNode(root, Scope.COMPILE, libs.umeng.apm.get())
                    setDependencyNode(root, Scope.COMPILE, libs.umeng.push.get())

                    setDependencyNode(root, Scope.COMPILE, libs.umeng.share.core.get())
                    setDependencyNode(root, Scope.COMPILE, libs.umeng.share.wx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.weiXinOpenSdk.get())

                    setScm(root)
                }
            }

            TencentCloud(MavenPublication) {
                def moduleName = 'TencentCloud'
                def publishModuleName = 'tencent-cloud'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.core.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())

                    setDependencyNode(root, Scope.COMPILE, libs.tencentCos.get())

                    setScm(root)
                }
            }

            shadowLib(MavenPublication) {
                def moduleName = 'shadow-lib'
                def publishModuleName = 'shadow-lib'

                def modulePath = "$libProjectPath/SDK/Shadow/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                // 非 aar 包的相关路径定义
                artifact("$modulePath/build/libs/${moduleName}.jar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            shadowInit(MavenPublication) {
                def moduleName = 'shadow-init'
                def publishModuleName = 'shadow-init'

                def modulePath = "$libProjectPath/SDK/Shadow/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'shadow-lib', getPublicationVersion())

                    setDependencyNode(root, Scope.RUNTIME, libs.gson.get())

                    setDependencyNode(root, Scope.COMPILE, libs.shadow.host.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.shadow.manager.asProvider().get())

                    setDependencyNode(root, Scope.COMPILE, libs.shadow.activity.container.get())

                    setDependencyNode(root, Scope.COMPILE, libs.shadow.host.multi.loader.ext.get())
                    setDependencyNode(root, Scope.COMPILE, libs.shadow.manager.multi.loader.ext.get())

                    setDependencyNode(root, Scope.PROVIDED, libs.shadow.common.get())
                    setDependencyNode(root, Scope.PROVIDED, libs.shadow.loader.asProvider().get())
                    setDependencyNode(root, Scope.PROVIDED, libs.shadow.loader.impl.get())

                    setScm(root)
                }
            }

            Navigation(MavenPublication) {
                def moduleName = 'Navigation'
                def publishModuleName = 'navigation'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.activity.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.material.get())

                    setDependencyNode(root, Scope.COMPILE, libs.smooth.navigation.get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.navigation.fragment.ktx.get()) {
                        exclude('androidx.navigation', 'navigation-fragment')
                    }
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.navigation.ui.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.navigation.ui.ktx.get())

                    setScm(root)
                }
            }

            Web(MavenPublication) {
                def moduleName = 'Web'
                def publishModuleName = 'web'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.jsBridge.get())

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'activity-result', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'xlog-init', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'umeng', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'picture-selector', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'date-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'bitmap-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'download', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'qrcode', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'popup', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'sms-util', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'preview-file', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.utilCodeX.get())
                    setDependencyNode(root, Scope.COMPILE, libs.jetpack.navigation.runtime.ktx.get())

                    setScm(root)
                }
            }


            ActivityResult(MavenPublication) {
                def moduleName = 'ActivityResult'
                def publishModuleName = 'activity-result'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.activity.ktx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.fragment.ktx.get())
                    setScm(root)
                }
            }

            XLogInit(MavenPublication) {
                def moduleName = 'XLogInit'
                def publishModuleName = 'xlog-init'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.xlog.get())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'mmkv-sp', getPublicationVersion())
                    setScm(root)
                }
            }

            MMKVSharedPreferences(MavenPublication) {
                def moduleName = 'MMKVSharedPreferences'
                def publishModuleName = 'mmkv-sp'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.startup.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.security.crypto.get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.core.ktx.get())
                    setDependencyNode(root, Scope.COMPILE, libs.mmkv.get())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'json-util', getPublicationVersion())
                    setScm(root)
                }
            }

            JsonUtil(MavenPublication) {
                def moduleName = 'JsonUtil'
                def publishModuleName = 'json-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.gson.get())
                    setScm(root)
                }
            }

            Permission(MavenPublication) {
                def moduleName = 'Permission'
                def publishModuleName = 'permission'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.activity.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.androidx.fragment.asProvider().get())
                    setDependencyNode(root, Scope.RUNTIME, libs.permissionX.get())
                    setScm(root)
                }
            }

            PictureSelector(MavenPublication) {
                def moduleName = 'PictureSelector'
                def publishModuleName = 'picture-selector'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'image-load', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.pickSelector.picture.selector.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.pickSelector.picture.selector.compress.get())
                    setDependencyNode(root, Scope.COMPILE, libs.pickSelector.picture.selector.ucrop.get())
                    setScm(root)
                }
            }

            ImageLoad(MavenPublication) {
                def moduleName = 'ImageLoad'
                def publishModuleName = 'image-load'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.COMPILE, libs.glide.asProvider().get())
                    setScm(root)
                }
            }

            DateUtil(MavenPublication) {
                def moduleName = 'DateUtil'
                def publishModuleName = 'date-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.annotation.get())
                    setScm(root)
                }
            }

            BitmapUtil(MavenPublication) {
                def moduleName = 'BitmapUtil'
                def publishModuleName = 'bitmap-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'mime-type', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, libs.utilCodeX.get())
                    setScm(root)
                }
            }

            MimeType(MavenPublication) {
                def moduleName = 'MimeType'
                def publishModuleName = 'mime-type'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                // 非 aar 包的相关路径定义
                artifact("$modulePath/build/libs/${moduleName}.jar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            Download(MavenPublication) {
                def moduleName = 'Download'
                def publishModuleName = 'download'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.activity.asProvider().get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.fragment.asProvider().get())

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'xlog-init', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.okHttp.okhttp.get())
                    setDependencyNode(root, Scope.COMPILE, libs.okHttp.easy.http.get())
                    setScm(root)
                }
            }

            QRCode(MavenPublication) {
                def moduleName = 'QRCode'
                def publishModuleName = 'qrcode'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'activity-result', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())
                    setDependencyNode(root, Scope.COMPILE, libs.zxing.lite.get())

                    setScm(root)
                }
            }

            Popup(MavenPublication) {
                def moduleName = 'Popup'
                def publishModuleName = 'popup'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.recyclerview.get())
                    setDependencyNode(root, Scope.COMPILE, libs.XPopup.get())

                    setScm(root)
                }
            }

            SmsUtil(MavenPublication) {
                def moduleName = 'SmsUtil'
                def publishModuleName = 'sms-util'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.activity.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.fragment.ktx.get())

                    setScm(root)
                }
            }

            PreviewFile(MavenPublication) {
                def moduleName = 'PreviewFile'
                def publishModuleName = 'preview-file'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'base-app-res', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'xlog-init', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'mime-type', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'image-load', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'download', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'popup', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'share', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'video-player', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.material.get())
                    setDependencyNode(root, Scope.COMPILE, libs.tbsSdk.get())

                    setScm(root)
                }
            }

            Share(MavenPublication) {
                def moduleName = 'Share'
                def publishModuleName = 'share'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.core.ktx.get())

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'mime-type', getPublicationVersion())

                    setScm(root)
                }
            }

            VideoPlayer(MavenPublication) {
                def moduleName = 'VideoPlayer'
                def publishModuleName = 'video-player'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.activity.ktx.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.fragment.ktx.get())

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'ImageLoad', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.gsyVideoPlayer.get())

                    setScm(root)
                }
            }

            Camera(MavenPublication) {
                def moduleName = 'Camera'
                def publishModuleName = 'camera'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'uikit-toast', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'base-ui', getPublicationVersion())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'permission', getPublicationVersion())

                    setDependencyNode(root, Scope.COMPILE, libs.camera.likeWX.get())

                    setScm(root)
                }
            }

            Update(MavenPublication) {
                def moduleName = 'Update'
                def publishModuleName = 'update'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, libs.updateAppUtilsx.get())

                    setScm(root)
                }
            }

            Banner(MavenPublication) {
                def moduleName = 'Banner'
                def publishModuleName = 'banner'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.viewpager2.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.recyclerview.get())
                    setDependencyNode(root, Scope.RUNTIME, myGroupId, 'image-load', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, libs.banner.get())

                    setScm(root)
                }
            }

            uniapp_base_oaid_sdk(MavenPublication) {
                def moduleName = 'base-oaid-sdk-aar'
                def publishModuleName = 'uniapp-base-oaid-sdk'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/base-oaid-sdk.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uniapp_breakpad_build_release(MavenPublication) {
                def moduleName = 'breakpad-build-release-aar'
                def publishModuleName = 'uniapp-breakpad-build-release'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/breakpad-build-release.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uniapp_v8_release(MavenPublication) {
                def moduleName = 'uniapp-v8-release-aar'
                def publishModuleName = 'uniapp-v8-release'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/uniapp-v8-release.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }

            uniMPSDK_V2_release(MavenPublication) {
                def moduleName = 'uniMPSDK-V2-release-aar'
                def publishModuleName = 'uniMPSDK-V2-release'

                def modulePath = "$libProjectPath/SDK/LocalAAR/uniapp-aars/$moduleName"

                groupId myGroupId
                artifactId publishModuleName

                version getPublicationVersion()
                artifact("$modulePath/uniMPSDK-V2-release.aar") //指定 aar 包所在的路径

                // 上传 source，这样使用方可以看到方法注释
                // artifact sourceAar(moduleName, modulePath)

                pom.withXml {
                    def root = asNode()
                    setScm(root)
                }
            }


            UniMP(MavenPublication) {
                def moduleName = 'UniMP'
                def publishModuleName = 'uni-mp'

                def modulePath = "$libProjectPath/SDK/$moduleName"

                groupId myGroupId
                artifactId publishModuleName
                version getPublicationVersion()

                // 非 aar 包的相关路径定义
                artifact("$modulePath/build/outputs/aar/${moduleName}-release.aar")
                artifact sourceAar(publishModuleName, modulePath)

                pom.withXml {
                    def root = asNode()

                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniapp-base-oaid-sdk', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniapp-breakpad-build-release', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniapp-v8-release', getPublicationVersion())
                    setDependencyNode(root, Scope.COMPILE, myGroupId, 'uniMPSDK-V2-release', getPublicationVersion())

                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.recyclerview.get())
                    setDependencyNode(root, Scope.RUNTIME, 'androidx.legacy', 'legacy-support-v4', '1.0.0')
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.appcompat.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.fastJson.get())

                    def fresco_version = '2.5.0'
                    setDependencyNode(root, Scope.RUNTIME, 'com.facebook.fresco', 'fresco', fresco_version)
                    setDependencyNode(root, Scope.RUNTIME, 'com.facebook.fresco', 'animated-gif', fresco_version)

                    setDependencyNode(root, Scope.RUNTIME, libs.glide.asProvider().get())
                    setDependencyNode(root, Scope.COMPILE, libs.android.gif.drawable.get())
                    setDependencyNode(root, Scope.RUNTIME, libs.androidx.webkit.get())

                    setScm(root)
                }
            }
        }

        repositories {
            // 配置 GitHubPackages 仓库
            maven {
                name = "GitHubPackages"

                url GITHUB_REPOSITORY

                credentials {
                    username = GITHUB_USER
                    password = GITHUB_PERSONAL_ACCESS_TOKEN
                }
            }

            // 配置 MavenLocal 仓库
            mavenLocal()
        }
    }
}

task publishingToGitHubPackages() {
    description "打包至 GitHubPackages"
    group 'my-publishing'
    dependsOn ':publishAllPublicationsToGitHubPackagesRepository'

    doLast {
        printPublicationVersion()
        println "打包完成------> GitHubPackages:$GITHUB_REPOSITORY"
    }
}

task publishingToMavenLocal() {
    description "打包至 MavenLocal"
    group 'my-publishing'
    dependsOn ':publishToMavenLocal'

    doLast {
        printPublicationVersion()
        println "打包完成 ------>  MavenLocal"
    }
}