import java.util.regex.Matcher
import java.util.regex.Pattern

pluginManagement {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://jitpack.io' }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    /**
     * FAIL_ON_PROJECT_REPOS:  如果设置此模式，则在项目中直接或通过插件直接声明的任何存储库都将触发构建错误
     * PREFER_PROJECT:         如果设置此模式，则在项目上声明的任何存储库会覆盖设置中声明的存储库
     * PREFER_SETTINGS：       如果设置此模式，则项目中使用的存储库只会以设置中声明的为准
     */
    repositoriesMode.set(RepositoriesMode.PREFER_PROJECT)

    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url 'https://maven.pkg.github.com/Heart-Beats/BaseProject'
            credentials {
                username = 'Heart-Beats'
                password = GITHUB_PACKAGES_READ_TOKEN
            }
        }
        maven { url 'https://maven.aliyun.com/repository/public' } // central 和 jcenter 的聚合仓
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    versionCatalogs {
        // 默认创建的 libs 进行配置
        libs {
            from("com.hl:catalog:1.0.0-SNAPSHOT")
        }
    }
}

rootProject.name = "BaseProject"

include ':app'

def includeBuildProjects = ['libs/project', 'libs/uikit']

includeBuildProjects.forEach {
    println "开始添加构建 -------------> $it"
    includeBuild(it)
}

//setting.gradle 加载和评估配置阶段完成
gradle.settingsEvaluated {
    println '设置加载完毕'
}

//项目加载完成
gradle.projectsLoaded {
    println "${it} ---------> projectsLoaded"

    gradle.rootProject.buildscript {
        println '开始执行初始化配置脚本'
    }
}

def getCurrentFlavor(Project project) {
    Gradle gradle = project.getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern = Pattern.compile("(assemble|generate|bundle)(.*?)(Release|Debug)")
    Matcher matcher = pattern.matcher(tskReqStr)
    String channel = ""
    if (matcher.find()) {
        channel = matcher.group(2).toLowerCase()
    }
    return channel
}

gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    void beforeEvaluate(Project project) {
        println "${project} -------------> beforeEvaluate"
        println "currentFlavor -------------> ${getCurrentFlavor(project)}"
    }

    void afterEvaluate(Project project, ProjectState state) {
        println "${project} -------------> afterEvaluate"
        println "currentFlavor -------------> ${getCurrentFlavor(project)}"
    }
})