plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.androidx.navigation.safeargs
    id 'kotlin-parcelize' // 目前在 groovy 中无法直接通过 toml 文件进行使用,  issue:https://github.com/gradle/gradle/issues/17968
}

apply from: "../commonGradle/build_config.gradle"

android {
    namespace 'com.hl.baseproject'

    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        applicationId 'com.hl.baseproject.demo'
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('./license/BaseProject.jks')
            storePassword 'android123456'
            keyPassword 'android123456'
            keyAlias 'BaseProject'
        }
        realse {
            storeFile file('./license/BaseProject.jks')
            storePassword 'android123456'
            keyPassword 'android123456'
            keyAlias 'BaseProject'
        }
    }

    buildTypes {
        // 创建 release 变体的 benchmark 副本来进行测试生成基准文件
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
        debug {
            // 是否需要混淆，默认使用 R8 优化
            def needMinify = false

            if (needMinify) {
                // 生成 baseline 文件时使用，避免切换 variant
                matchingFallbacks = ['release']

                // 是否开启调试， 混淆打开时 debug 调试需关闭，否则混淆无效
                debuggable !needMinify

                minifyEnabled true
                zipAlignEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }

            signingConfig signingConfigs.debug
        }
        release {
            // 1、是否进行混淆，默认使用 R8 优化
            minifyEnabled true

            // 2、开启zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true

            // 3、移除无用的resource文件：当 ProGuard 把部分无用代码移除的时候，
            // 这些代码所引用的资源也会被标记为无用资源，然后系统通过资源压缩功能将它们移除
            // 需要注意的是目前资源压缩器目前不会移除values/文件夹中定义的资源（例如字符串、尺寸、样式和颜色）
            shrinkResources true

            // 4、混淆文件的位置，其中 proguard-android.txt 为 sdk 默认的混淆配置，位于android-sdk/tools/proguard/proguard-android.txt
            // 此外，proguard-android-optimize.txt 也为sdk默认的混淆配置，但它默认打开了优化开关, 可配置相关代码为无效代码
            // 而 proguard-rules.pro 是该模块下的混淆配置。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.realse
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        // 定义 Kotlin 编译器扩展版本与 Kotlin 版本相关联，需与项目的 Kotlin 版本匹配，详见：https://developer.android.com/jetpack/androidx/releases/compose-kotlin?hl=zh-cn
        kotlinCompilerExtensionVersion = '1.4.5'
    }
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://jitpack.io' }
    mavenCentral()

    maven {
        name = "GitHubPackages"
        url "https://maven.pkg.github.com/tencent/shadow"
        //一个只读账号兼容Github Packages暂时不支持匿名下载
        //https://github.community/t/download-from-github-package-registry-without-authentication/14407
        credentials {
            username = 'readonlypat'
            password = '\u0067hp_s3VOOZnLf1bTyvHWblPfaessrVYyEU4JdNbs'
        }
    }
}

dependencies {
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.androidx.test.espresso.core

    implementation libs.bundles.projectBase
    implementation libs.material

    implementation libs.jetpack.compose.material.icons.extended
    implementation libs.jetpack.compose.runtime.livedata

    // 在 Compose 中重复使用 View 系统的 Material Design Components (MDC) 主题时适配使用
    implementation "com.google.accompanist:accompanist-themeadapter-material:0.28.0"

    implementation libs.coil.compose

    implementation 'com.hl:base-api'
    implementation('com.hl:base-arch') {
        // base-arch 依赖传递了 smooth-navigation，重写了 navigation-fragment 中的相关类，会冲突需要排除
        exclude group: 'androidx.navigation', module: 'navigation-fragment'
    }

    //    def hlVersion = '0.5.9'
    //    implementation "com.hl:tencent-cloud:${hlVersion}"

    implementation 'com.hl:TencentCloud'
    implementation "com.hl:shadow-init"
    implementation "com.hl:UniMP"

    implementation libs.sensey

    //添加 ProfileInstaller 库以启用本地和 Play 商店中的基准配置文件编译
    implementation 'androidx.profileinstaller:profileinstaller:1.2.0-alpha01'
}